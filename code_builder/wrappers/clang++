#!/bin/bash

# check if the arguments with which the parent was called match this call
# if yes, we probably have recursion
PARENT_COMMAND=$(ps -o args= $PPID)
PARENT_ARGS=$(echo "$PARENT_COMMAND" | cut -d' ' -f2- -)
if [[ "$PARENT_ARGS" == "$@" ]]; then
    echo "error: Recursion in wrapper detected, aborting..."
    echo "error: Recursion in wrapper detected, aborting..." > /dev/stderr
    exit 1
fi

DIR="$(dirname "$(readlink -f "$0")")"
source "${DIR}/clang-wrapper.cfg"
source "${DIR}/clang-wrapper-functions.sh"
# echo "######################## clang call" >> /home/fba_code/build/wrapper++.log
# echo $PARENT_ARGS  >> /home/fba_code/build/wrapper++.log
echo "${CLANGCXX} ${@}"  >> /home/fba_code/build/clang_calls.log
run_compilation "${CLANGCXX}" "$@"

# DIR=/home/fba_code/wrappers
# source "${DIR}/clang-wrapper.cfg"
# "${CLANGCXX}" "$@"

# # Check if this is a recursive call to prevent infinite recursion
# if [ "$CLANGCXX_WRAPPER_CALLED" != "1" ]; then
#     # Set the environment variable to mark that the wrapper has been called
#     export CLANGCXX_WRAPPER_CALLED=1
    
#     DIR=/home/fba_code/wrappers
#     source "${DIR}/clang-wrapper.cfg"
#     source "${DIR}/clang-wrapper-functions.sh"

#     echo "${CLANGCXX} ${@}"  >> /home/fba_code/build/clang_calls.log
#     run_compilation "${CLANGCXX}" "$@"

#     # Unset the environment variable for subsequent calls
#     unset CLANGCXX_WRAPPER_CALLED
# else
#     # This else clause handles the actual g++ invocation when the wrapper calls itself
#     # /usr/bin/g++ "$@"

#     # actually do nothing since the run_compilation function does this part as well
#     true
# fi